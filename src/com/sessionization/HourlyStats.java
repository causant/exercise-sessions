package com.sessionization;



import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.FileUtil;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class HourlyStats {

	//This application, starting from the cvs file generated by the sessionization job, calculates basic hourly statistics. 
	public static String period = "";
	/**
	 * @param args
	 * @throws Exception 
	 */
	public static void main(String[] args) throws Exception {
		
		//Init job configuration
		JobConf conf = new JobConf();
		conf.set("mapreduce.textoutputformat.separator",",");
		conf.set("mapred.textoutputformat.separator", ",");
		String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
		
		if(otherArgs.length != 2){
			System.err.println("Usage: hourly_stats <in> <out>");
			System.exit(2);
		}
		
		Job job = Job.getInstance(conf);
		job.setJarByClass(HourlyStats.class);
		job.setMapperClass(HourlyStatsMapper.class);
		
		job.setReducerClass(HourlyStatsReducer.class);
		
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(IntWritable.class);
		
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		
		//
		LazyOutputFormat.setOutputFormatClass(job, TextOutputFormat.class);
		
		Path inputPath = new Path(otherArgs[0]);
		Path outputPath = new Path(otherArgs[1]);
		FileInputFormat.addInputPath(job, inputPath);
		FileOutputFormat.setOutputPath(job, outputPath );
		/*
		 * Delete output filepath if already exists
		 */
		FileSystem fs = FileSystem.newInstance(conf);

		if (fs.exists(outputPath)) {
			fs.delete(outputPath, true);
		}
		int exitStatus= job.waitForCompletion(true) ? 0 : 1;
		FileUtil.copyMerge(fs, outputPath, fs, new Path(otherArgs[1]+ "/stats/stats.csv"), false, conf, "");
		System.exit(exitStatus);
	}

}
